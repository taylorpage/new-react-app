'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var context = window.AudioContext || window.webkitAudioContext;

var AudioContextComponent = function (_Component) {
	_inherits(AudioContextComponent, _Component);

	function AudioContextComponent() {
		_classCallCheck(this, AudioContextComponent);

		return _possibleConstructorReturn(this, Object.getPrototypeOf(AudioContextComponent).apply(this, arguments));
	}

	_createClass(AudioContextComponent, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			if (context) this.audioContext = new context();else {
				console.error('AudioContext not supported in this browser');
				this.audioContext = {};
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.audioContext.close();
		}
	}, {
		key: 'getChildContext',
		value: function getChildContext() {
			return { audioContext: this.audioContext };
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				null,
				this.props.children
			);
		}
	}]);

	return AudioContextComponent;
}(_react.Component);

exports.default = AudioContextComponent;


AudioContextComponent.childContextTypes = {
	audioContext: _react2.default.PropTypes.any.isRequired
};